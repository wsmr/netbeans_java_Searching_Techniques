/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author akna
 */
import java.util.Random;
import java. util. Arrays;
public class Aki extends javax.swing.JFrame {

    /**
     * Creates new form Aki
     */
    public Aki() {
        initComponents();    
    }
    int[] array = new int[5];
    int[] newarray = new int[5];
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        linearAnswer = new javax.swing.JTextField();
        linearRuntime = new javax.swing.JTextField();
        interpolationAnswer = new javax.swing.JTextField();
        interpolationRuntime = new javax.swing.JTextField();
        jumpAnswer = new javax.swing.JTextField();
        jumpRuntime = new javax.swing.JTextField();
        binaryAnswer = new javax.swing.JTextField();
        binaryRuntime = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        linearButton = new javax.swing.JButton();
        binaryButton = new javax.swing.JButton();
        interpolationButton = new javax.swing.JButton();
        jumpButton = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        arrayButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 0, 255));

        jLabel3.setText("Results");

        jLabel4.setBackground(new java.awt.Color(102, 255, 255));
        jLabel4.setText("Linear");

        jLabel5.setBackground(new java.awt.Color(102, 255, 255));
        jLabel5.setText("Interpolation");

        jLabel6.setText("Jump");

        jLabel7.setText("Binary");

        jLabel8.setText("Runtime");

        jLabel9.setText("Index");

        linearAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearAnswerActionPerformed(evt);
            }
        });

        linearRuntime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearRuntimeActionPerformed(evt);
            }
        });

        interpolationAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpolationAnswerActionPerformed(evt);
            }
        });

        interpolationRuntime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpolationRuntimeActionPerformed(evt);
            }
        });

        jumpAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpAnswerActionPerformed(evt);
            }
        });

        jumpRuntime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpRuntimeActionPerformed(evt);
            }
        });

        binaryAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryAnswerActionPerformed(evt);
            }
        });

        binaryRuntime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryRuntimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel3))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(linearAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                    .addComponent(linearRuntime)))
                            .addComponent(jLabel8)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addGap(22, 22, 22)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(15, 15, 15))
                    .addComponent(interpolationAnswer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interpolationRuntime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jumpAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .addComponent(jumpRuntime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(binaryRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(binaryAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel6)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(linearAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interpolationAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jumpAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binaryAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(linearRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(interpolationRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jumpRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(binaryRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(25, 25, 25))
        );

        jPanel1.setBackground(new java.awt.Color(51, 204, 255));

        jLabel1.setText("Search");

        jLabel2.setText("Select  Searching  Technique");

        linearButton.setBackground(new java.awt.Color(0, 102, 102));
        linearButton.setText("Linear");
        linearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearButtonActionPerformed(evt);
            }
        });

        binaryButton.setBackground(new java.awt.Color(0, 102, 102));
        binaryButton.setText("Binary");
        binaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binaryButtonActionPerformed(evt);
            }
        });

        interpolationButton.setBackground(new java.awt.Color(0, 102, 102));
        interpolationButton.setText("Interpolation");
        interpolationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpolationButtonActionPerformed(evt);
            }
        });

        jumpButton.setBackground(new java.awt.Color(0, 102, 102));
        jumpButton.setText("Jump");
        jumpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpButtonActionPerformed(evt);
            }
        });

        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel10.setText("Searching Techniques and Runtimes");

        arrayButton.setText("Create Array");
        arrayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(arrayButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(linearButton)
                        .addGap(10, 10, 10)
                        .addComponent(interpolationButton)
                        .addGap(18, 18, 18)
                        .addComponent(jumpButton)
                        .addGap(18, 18, 18)
                        .addComponent(binaryButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel10)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(arrayButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linearButton)
                    .addComponent(binaryButton)
                    .addComponent(interpolationButton)
                    .addComponent(jumpButton))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void linearAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linearAnswerActionPerformed

    private void linearRuntimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearRuntimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linearRuntimeActionPerformed

    private void interpolationAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpolationAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_interpolationAnswerActionPerformed

    private void interpolationRuntimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpolationRuntimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_interpolationRuntimeActionPerformed

    private void jumpAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jumpAnswerActionPerformed

    private void jumpRuntimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpRuntimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jumpRuntimeActionPerformed

    private void binaryAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_binaryAnswerActionPerformed

    private void binaryRuntimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryRuntimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_binaryRuntimeActionPerformed

    private void linearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearButtonActionPerformed
        int Larr[] = newarray;
        System.out.printf("\n"+"LinearSearch Array --> : %s",Arrays.toString(Larr)+"\n");
        long starttime=System.nanoTime();
        
        int size = Larr.length;
        int value=Integer.valueOf(jTextFieldSearch.getText());
        String input = String.valueOf(value);
        if ( input!="") {
            for (int i=0 ;i< size; i++){
            if(Larr[i]==value){
            linearAnswer.setText((Integer.toString(i) ));
            break;
            } else{ linearAnswer.setText("Not Found"); }
        }

        long endtime= System.nanoTime();
        long result=endtime-starttime;
        //System.out.println(result);
        linearRuntime.setText((Long.toString(result) ));
        }
        else {
            jTextFieldSearch.setText("ADD Here");
        }
    }//GEN-LAST:event_linearButtonActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void arrayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrayButtonActionPerformed
               
        Random rd = new Random(); // creating Random object
        int[] arr = new int[5];

        for (int i = 0; i < arr.length; i++) {
            arr[i] = rd.nextInt(100); // storing random integers in an array
            }
        array = arr;
        newarray = arr.clone();
        
        System.out.printf("--------- "+"\n"+"Random Array --> : %s",Arrays.toString(arr)+"\n"+"--------- "+"\n");
    }//GEN-LAST:event_arrayButtonActionPerformed

    private void binaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binaryButtonActionPerformed
        long starttime=System.nanoTime();
     
        int Barr[] = array;
        int value = Integer.valueOf(jTextFieldSearch.getText());
        int key = value;
        int fst = 0;
        int lst = Barr.length-1;
        Arrays.sort(Barr);
        System.out.printf("\n"+"BinarySearch Array --> : %s",Arrays.toString(Barr)+"\n");
        if ( Barr[fst] == Barr[lst] ) {
          if (Barr[fst] == key ) {
              binaryAnswer.setText((Integer.toString(0) ));
          } else binaryAnswer.setText("not found") ;

        } else if ( Barr[fst] > key ) { binaryAnswer.setText("not found") ;
        } else if ( Barr[lst] < key ) { binaryAnswer.setText("not found") ;
        } else binarySearch( fst,lst,Barr,key,binaryAnswer );
        long endtime= System.nanoTime();
        long result=endtime-starttime;
        //System.out.println(result);
        binaryRuntime.setText((Long.toString(result) ));
        
    }//GEN-LAST:event_binaryButtonActionPerformed
  public static void binarySearch(int first, int last, int Barr[], int key, javax.swing.JTextField binaryAnswer) {
    int mid = (first + last)/2;  
    while( first <= last ){  
        if ( Barr[mid] < key ){  
            first = mid + 1;     
        }else if ( Barr[mid] == key ){  
                binaryAnswer.setText((Integer.toString(mid) ));  
                break;  
        }else{  
         last = mid - 1;  
        }  
      mid = (first + last)/2;  
    }  
    if ( first > last ){  
        binaryAnswer.setText("not found");  
    }

  }
    private void jumpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpButtonActionPerformed
      long starttime=System.nanoTime();
        int Jarr[] = array;
       Arrays.sort(Jarr);
       int value = Integer.valueOf(jTextFieldSearch.getText());
        int x = value; 
  
        // Find the index of 'x' using Jump Search 
        int index = jumpSearch(Jarr, x,jumpAnswer);
        if(index == -1){
             jumpAnswer.setText("not found") ;
        }else jumpAnswer.setText((Integer.toString(index) ));
  
        // Print the index where 'x' is located 
           long endtime= System.nanoTime();

        long result=endtime-starttime;
        //System.out.println(result);
        jumpRuntime.setText((Long.toString(result) ));   
         
    }
        public static int jumpSearch(int[] Jarr, int x,javax.swing.JTextField jumpAnswer) 
    { 
        int n = Jarr.length; 
  
        // Finding block size to be jumped 
        int step = (int)Math.floor(Math.sqrt(n)); 
  
        // Finding the block where element is 
        // present (if it is present) 
        int prev = 0; 
        while (Jarr[Math.min(step, n)-1] < x) 
        { 
            prev = step; 
            step += (int)Math.floor(Math.sqrt(n)); 
            if (prev >= n) 
            return -1;
        } 
  
        // Doing a linear search for x in block 
        // beginning with prev. 
        while (Jarr[prev] < x) 
        { 
            prev++; 
  
            // If we reached next block or end of 
            // array, element is not present. 
            if (prev == Math.min(step, n)) 
              return -1;
//            jumpAnswer.setText("not found") ;
        } 
  
        // If element is found 
        if (Jarr[prev] == x) 
            return prev; 
       // jumpAnswer.setText("not found") ;
        return -1; 
//        throw new IllegalStateException("not found");
        
       // jumpAnswer.setText(Integer.toString(return) );
        
     
    }//GEN-LAST:event_jumpButtonActionPerformed

    private void interpolationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpolationButtonActionPerformed
     int Iarr[] = array;
     long starttime=System.nanoTime();
       Arrays.sort(Iarr);
       int x = Integer.valueOf(jTextFieldSearch.getText()); // Element to be searched 
         int index = interpolationSearch(x,Iarr); 
           
         // If element was found 
         if (index != -1) 
               interpolationAnswer.setText((Integer.toString(index))); 
            else
               interpolationAnswer.setText("not found") ; 
         long endtime= System.nanoTime();
    long result=endtime-starttime;
        //System.out.println(result);
        interpolationRuntime.setText((Long.toString(result) ));
        
    }  
    public static int interpolationSearch(int x,int[] Iarr) 
    { 
        
    
        // Find indexes of two corners 
        int lo = 0, hi = (Iarr.length - 1); 
       
        // Since array is sorted, an element present 
        // in array must be in range defined by corner 
        while (lo <= hi && x >= Iarr[lo] && x <= Iarr[hi]) 
        {         
  
            if (lo == hi) 
            { 
                if (Iarr[lo] == x) return lo; 
                return -1; 
            } 
         // Probing the position with keeping 
            // uniform distribution in mind. 
              
            int pos = lo + (((hi-lo) / 
                  (Iarr[hi]-Iarr[lo]))*(x - Iarr[lo])); 
       
            // Condition of target found 
            if (Iarr[pos] == x) 
                return pos; 
       
            // If x is larger, x is in upper part 
            if (Iarr[pos] < x) 
                lo = pos + 1; 
       
            // If x is smaller, x is in the lower part 
            else
                hi = pos - 1; 
        } 
        return -1; 
    }//GEN-LAST:event_interpolationButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aki.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aki().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton arrayButton;
    private javax.swing.JTextField binaryAnswer;
    private javax.swing.JButton binaryButton;
    private javax.swing.JTextField binaryRuntime;
    private javax.swing.JTextField interpolationAnswer;
    private javax.swing.JButton interpolationButton;
    private javax.swing.JTextField interpolationRuntime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.swing.JTextField jumpAnswer;
    private javax.swing.JButton jumpButton;
    private javax.swing.JTextField jumpRuntime;
    private javax.swing.JTextField linearAnswer;
    private javax.swing.JButton linearButton;
    private javax.swing.JTextField linearRuntime;
    // End of variables declaration//GEN-END:variables
}
